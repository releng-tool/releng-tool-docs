# SOME DESCRIPTIVE TITLE.
# Copyright (C) releng-tool
# This file is distributed under the same license as the releng-tool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: releng-tool\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-09 21:08-0400\n"
"PO-Revision-Date: 2023-07-29 21:24+0000\n"
"Language-Team: Polish (https://app.transifex.com/releng-tool/teams/171906/pl/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pl\n"
"Plural-Forms: nplurals=4; plural=(n==1 ? 0 : (n%10>=2 && n%10<=4) && (n%100<12 || n%100>14) ? 1 : n!=1 && (n%10>=0 && n%10<=1) || (n%10>=5 && n%10<=9) || (n%100>=12 && n%100<=14) ? 2 : 3);\n"

#: ../../content/news/2023-02-12_00.15.00.md:1
msgid "0.15 (2023-02-12)"
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:3
msgid "Introduce extension support for event listeners"
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:5
msgid ""
"Support has been added for extensions to listen on various events generated "
"by releng-tool. Extensions can react to certain events to either manipulate "
"build content at certain stages or even manipulate the script environment. "
"Consider the following example which injects a custom function into the "
"script environment:"
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:22
msgid ""
"With this extension loaded in for a project, the function `my_function` can "
"now be used in a project's post-build script (e.g. `releng-post-build`)."
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:25
msgid "The following outlines the list of all newly added event types:"
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:27
msgid "`config-loaded` -- Triggered after a configuration is processed"
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:28
msgid "`post-build-started` -- Triggered before a post-build event starts"
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:29
msgid "`post-build-finished` -- Triggered after a post-build event ends"
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:31
msgid ""
"For more information on implementing support to listen for events or "
"creating extensions in general, see the API implementation found in this "
"tool's repository ([releng_tool/api/__init__.py][api])."
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:35
msgid ""
"Support setting software build of materials format in project configuration"
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:37
msgid ""
"Developers can now specify a target software build of materials (SBOM) "
"format in a project's configuration file. For example, to produce a JSON "
"formatted SBOM file over a default text file, the following can be used:"
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:45
msgid ""
"This should allow developers to provide specific SBOM formatted documents "
"for their builds without needing to supply `--sbom-format` in their terminal"
" or an external build script."
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:49
msgid "Directory configuration for package patching"
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:51
msgid ""
"When a package includes patches to apply after extraction, the target "
"directory where patches were applied could vary if a project utilized the "
"`LIBFOO_BUILD_SUBDIR` option. This made the use of patches difficult for "
"users who had patches designed for the extracted-root of a package, and not "
"necessarily the root of build scripts for a package."
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:57
msgid ""
"This release ensures that users can apply patches directly at the root of "
"packages by no longer considering the configuration `LIBFOO_BUILD_SUBDIR`. "
"Users who need to utilize patching in a subdirectory of a package can now "
"use the `LIBFOO_PATCH_SUBDIR` option."
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:62
msgid "Make projects provided prefix in installation stage"
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:64
msgid ""
"Project supporting an installation stage will typically handle a destination"
" directory option (e.g. `DESTDIR`) and a prefix option (`PREFIX`; if "
"applicable). While various project types are configured/provided these "
"appropriate options, `make`-based projects were never implicitly provided a "
"hint to the configured prefix. Packages which wanted to share the configured"
" prefix for a build needed to explicitly forward the prefix option via a "
"project's package definition."
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:72
msgid ""
"This release changes this by always provided the `PREFIX` option when a "
"Make-based project's installation stage occurs."
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:75
msgid "Fixed issue where reconfiguration/rebuild flags may not be set"
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:77
msgid ""
"Projects may define various build conditionals whether the system is a fresh"
" build or a rebuild. releng-tool provides a series of flags to help projects"
" understand the running state: `RELENG_REBUILD`, `RELENG_RECONFIGURE` and "
"`RELENG_REINSTALL`. Unfortunately, previous releases were somewhat "
"inconsistent to when these flags were enabled. While, for example, a package"
" rebuild would result in the `RELENG_REBUILD` flag to be set, the "
"`RELENG_REINSTALL` option may not be set in this case. Developers may have "
"expected the reinstallation flag be set in this example since the re-build "
"without the `-only` postfix would automatically process trailing stages."
msgstr ""

#: ../../content/news/2023-02-12_00.15.00.md:87
msgid ""
"Changes have been made in this most recent version to ensure appropriate "
"flags are set. Specifically, a `<pkg>-reconfigure` request will now ensure "
"`RELENG_REBUILD` and `RELENG_REINSTALL` are set. Also, a `<pkg>-rebuild` "
"request will now ensure `RELENG_REINSTALL` is set."
msgstr ""
