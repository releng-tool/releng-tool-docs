# SOME DESCRIPTIVE TITLE.
# Copyright (C) releng-tool
# This file is distributed under the same license as the releng-tool package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: releng-tool \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-09 21:08-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../content/getting-started/tutorial-basic.md:1
msgid "Tutorial \"Basic packages\""
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:3
msgid "This tutorial shows an example using very simple script-based packages. This example will make a project with two packages, setup a dependency between them and setup scripts to help show a developer how packages are processed."
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:8
msgid "To start, make a new folder for the project, folders for each package and move into the root folder:"
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:17
msgid "Inside the `liba` package, a package definition and script-based files will be created. First, build the package definition `my-project/liba/liba.py` with the following contents:"
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:25
msgid "Next, create a build script for the `liba` project `my-project/liba/liba-build.py` with the following contents:"
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:32
msgid "Repeat the same steps for the `program-b` package with the file `my-project/program-b/program-b.py` containing:"
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:40
msgid "And `my-project/program-b/program-b-build.py` containing:"
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:46
msgid "The second package is a bit different since it indicates that package `program-b` has a dependency on `liba`. Configuring a dependency ensures releng-tool will process the `liba` package before `program-b`."
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:50
msgid "With this minimal set of packages, the project's releng-tool configuration can now be created. At the root of the project, create a `releng.py` configuration file with the following contents:"
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:60
msgid "The `packages` key indicates a list of required packages to be processed. In this example, we only need to list `program-b` since `liba` will be implicitly loaded through the dependency configuration set in program B's package definition."
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:65
msgid "The file structure should now be as follows:"
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:79
msgid "This sample project should be ready for a spin. While in the `my-project` folder, invoke `releng-tool`:"
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:97
msgid "This above output shows that the `liba` stages are invoke followed by `program-b` stages. For the build stage in each package, each respective package script has been invoked. While this example only prints a message, more elaborate scripts can be made to handle a package's source to build."
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:102
msgid "To clean the project, a `releng-tool clean` request can be invoked:"
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:108
msgid "After a `clean` request, the project should be ready to perform a fresh build."
msgstr ""

#: ../../content/getting-started/tutorial-basic.md:111
msgid "This concludes this tutorial."
msgstr ""
